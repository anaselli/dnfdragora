#!/usr/bin/python3

import sys

if sys.path[0] is not '/usr/bin':
    # We know this script is running from a git checkout
    import os
    SCRIPT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))
    SRC_DIR = os.path.normpath(os.path.join(SCRIPT_DIR, "./"))
    SRC_BIN_DIR = os.path.abspath(os.path.join(SCRIPT_DIR, "bin/"))
    sys.path.insert(0, SRC_DIR)

if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser(prog='dnfdragora', usage='%(prog)s [options]')
    ui_select_parser = parser.add_mutually_exclusive_group()
    # libyui pass through arguments
    ui_select_parser.add_argument('--gtk', help='start using yui GTK+ plugin implementation', action='store_true')
    ui_select_parser.add_argument('--ncurses', help='start using yui ncurses plugin implementation', action='store_true')
    ui_select_parser.add_argument('--qt', help='start using yui Qt plugin implementation', action='store_true')
    parser.add_argument('--fullscreen', help='use full screen for dialogs', action='store_true')

    # Application arguments
    parser.add_argument('--update-only', help='show updates only dialog', action='store_true')

    parser.add_argument('--group_icons_path', nargs='?', help='force a new path for group icons (instead of /usr/share/icons)')
    parser.add_argument('--images_path', nargs='?', help='force a new path for all the needed images (instead of /usr/share/dnfdragora/images)')
    args = parser.parse_args()

    import dnfdaemon.client
    import dnfdragora.ui
    import logging
    logger = logging.getLogger('dnfdragora')

    options = {}
    if args.update_only:
        options['update_only'] = True
    if args.group_icons_path:
        options['group_icons_path'] = args.group_icons_path
    if args.images_path:
        options['images_path'] = args.images_path

    main_gui = None
    try:
        main_gui = dnfdragora.ui.mainGui(options)

        main_gui.handleevent()

    except dnfdaemon.client.DaemonError as e:
        logger.error("dnfdaemon client error: %s ", e)
    except NameError as e:
        logger.error("dnfdaemon NameError: %s ", e)
    except AttributeError as e:
        logger.error("dnfdaemon AttributeError: %s ", e)
    except:
        logger.error("Unexpected error: %s ", sys.exc_info()[0])
    finally:
        if (main_gui is not None) :
            main_gui.backend.quit()
        import yui
        yui.YDialog.deleteAllDialogs()
        # next line seems to be a workaround to prevent the qt-app from crashing
        # see https://github.com/libyui/libyui-qt/issues/41
        yui.YUILoader.deleteUI()
        logger.critical("Closing dnfdragora")
